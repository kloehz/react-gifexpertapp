{"version":3,"sources":["components/AddCategory.tsx","components/GifGriditem.tsx","helpers/GetGifs.tsx","components/GifGrid.tsx","Hooks/useFetchGifs.tsx","GifExpertApp.tsx","index.tsx"],"names":["AddCategory","props","useState","inputValue","setInputValue","setCategories","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","handleInputChange","GifGriditem","image","title","url","className","src","alt","getGifs","axios","create","baseURL","requestGifs","category","a","get","encodeURI","res","data","gifs","map","gif","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mNAMaA,EAAc,SAAEC,GAAyB,IAAD,EAEbC,mBAAS,IAFI,mBAE1CC,EAF0C,KAE9BC,EAF8B,KAGzCC,EAAkBJ,EAAlBI,cAcR,OACI,sBAAMC,SATW,SAAEC,GACnBA,EAAEC,iBACEL,EAAWM,OAAOC,OAAS,IAC3BL,GAAe,SAAAM,GAAG,OAAMR,GAAN,mBAAqBQ,OACvCP,EAAc,MAKlB,SACI,uBACIQ,KAAK,OACLC,MAAQV,EACRW,SAAW,SAACP,GAAD,OAjBG,SAACA,GACvBH,EAAeG,EAAEQ,OAAOF,OAgBEG,CAAkBT,SCnBvCU,EAAc,SAAEhB,GAAwB,IAAD,EAEzBA,EAAMiB,MAArBC,EAFwC,EAExCA,MAAOC,EAFiC,EAEjCA,IAEf,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,kCAAMA,EAAN,W,gCCbCK,E,OAAUC,EAAMC,OAAO,CAChCC,QAAS,kCAIAC,EAAW,uCAAG,WAAQC,GAAR,mBAAAC,EAAA,sEACLN,EAAQO,IAAR,oBAAgCC,UAAUH,GAA1C,uDADK,cACjBI,EADiB,OAEjBC,EAAOD,EAAIC,KAAKA,KAChBC,EAAqBD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EACxC,MAAO,CACHC,GAAID,EAAIC,GACRnB,MAAOkB,EAAIlB,MACXC,IAAG,UAAEiB,EAAIE,cAAN,aAAE,EAAYC,iBAAiBpB,QAPnB,kBAWhBe,GAXgB,2CAAH,sDCIXM,EAAU,SAAExC,GAAsB,IAEnC4B,EAAa5B,EAAb4B,SAFkC,ECHlB,SAAEA,GAAuB,IAAD,EAEtB3B,mBAAiB,CACvCgC,KAAM,GACNQ,SAAS,IAJmC,mBAEzCC,EAFyC,KAElCC,EAFkC,KAmBhD,OAZAC,qBAAU,WAENjB,EAAaC,GACRiB,MAAM,SAAAX,GACHS,EAAS,CACLV,KAAMC,EACNO,SAAS,SAItB,CAAEb,IAEEc,EDZ2BI,CAAclB,GAAlCU,EAJ4B,EAIlCL,KAAcQ,EAJoB,EAIpBA,QAEtB,OACI,qCACI,oBAAIrB,UAAU,oCAAd,SAAoDQ,IAElDa,GAAW,mBAAGrB,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEQkB,EAAOH,KAAK,SAAAlB,GACR,OAAO,cAAC,EAAD,CAEHA,MAAQA,GADFA,EAAMoB,aExB3BU,EAAe,WAAM,MAGM9C,mBAAmB,CAAC,qBAH1B,mBAGvB+C,EAHuB,KAGX5C,EAHW,KAM9B,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,6BAEQ4C,EAAWb,KAAK,SAAAP,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,YChBlCqB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6f740484.chunk.js","sourcesContent":["import { useState } from \"react\"\n\ninterface IAddCategory {\n    setCategories: React.Dispatch<React.SetStateAction<string[]>>\n}\n\nexport const AddCategory = ( props: IAddCategory) => {\n\n    const [inputValue, setInputValue] = useState('');\n    const { setCategories } = props;\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = ( e:React.FormEvent<HTMLFormElement> ) => {\n        e.preventDefault();\n        if( inputValue.trim().length > 2){\n            setCategories( cat => [ inputValue, ...cat ]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type=\"text\"\n                value={ inputValue }\n                onChange={ (e) => handleInputChange(e) }\n            />\n        </form>\n    )\n}\n","\ninterface IGifMapped {\n    image: {\n        id: string,\n        title: string,\n        url: string\n    }\n}\n\nexport const GifGriditem = ( props: IGifMapped ) => {\n\n    const { title, url } = props.image;\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p> { title } </p>\n        </div>\n    )\n}\n","import axios from 'axios';\nimport { Gifs, IGifMapped } from '../interfaces/gifs';\n\nexport const getGifs = axios.create({\n    baseURL: 'https://api.giphy.com/v1/gifs'\n});\n\n\nexport const requestGifs = async ( category: string ) => {\n    const res = await getGifs.get<Gifs>(`/search?q=${ encodeURI(category) }&limit=10&api_key=CCqcAB6pyZk53EmH5LdddQsEWn2UdDPL`);\n    const data = res.data.data;\n    const gifs: IGifMapped[] = data.map( gif => {\n        return {\n            id: gif.id,\n            title: gif.title,\n            url: gif.images?.downsized_medium.url\n        }\n    });\n\n    return gifs;\n}\n","import { useState, useEffect } from 'react';\nimport { requestGifs } from '../helpers/GetGifs';\nimport { IGifMapped } from '../interfaces/gifs';\nimport { GifGriditem } from './GifGriditem';\n\nimport { useFetchGifs } from \"../Hooks/useFetchGifs\";\n\ninterface IGifGrid {\n    category: string\n}\n\n\nexport const GifGrid = ( props: IGifGrid ) => {\n\n    const { category } = props;\n    // const [images, setImages] = useState<IGifMapped[]>([])\n    const { data: images, loading } = useFetchGifs( category );\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\n\n            <div className=\"card-grid\">\n                {\n                    images.map( image => {\n                        return <GifGriditem\n                            key={ image.id }\n                            image={ image } />\n                    })\n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { requestGifs } from '../helpers/GetGifs';\nimport { IGifMapped } from '../interfaces/gifs';\n\ninterface IState {\n    data: IGifMapped[],\n    loading: boolean\n}\n\nexport const useFetchGifs = ( category: string ) => {\n\n    const [state, setState] = useState<IState>({\n        data: [],\n        loading: true,\n    });\n\n    useEffect(() => {\n        \n        requestGifs( category )\n            .then( gifs => {\n                setState({\n                    data: gifs,\n                    loading: false\n                });\n            })\n\n    }, [ category ])\n\n    return state;\n\n}\n","import { useState } from \"react\"\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from \"./components/GifGrid\";\n\nexport const GifExpertApp = () => {\n\n    // const categories = ['Kimetsu no yaiba', 'One Punch', 'Attack on titan']\n    const [categories, setCategories] = useState<string[]>(['Kimetsu no yaiba'])\n\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <hr />\n            <AddCategory setCategories={ setCategories }/>\n\n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid\n                            key={ category }\n                            category={ category } />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp /> ,\n  document.getElementById('root')\n);"],"sourceRoot":""}